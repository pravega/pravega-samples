/*
 * Copyright (c) 2017 Dell Inc., or its subsidiaries. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 */
plugins {
    id 'com.github.johnrengelman.shadow' version '2.0.3'
}

apply plugin: "java"
apply plugin: "scala"
apply plugin: "distribution"
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

sourceCompatibility = "1.8"
archivesBaseName = 'pravega-flink-examples'

dependencies {
    compile "de.javakaffee:kryo-serializers:${kryoSerializerVersion}"
    compile "org.scala-lang.modules:scala-java8-compat_$flinkScalaVersion:${scalaJava8CompatVersion}"
    compile "io.pravega:pravega-connectors-flink_$flinkScalaVersion:${flinkConnectorVersion}"
    compile "org.apache.flink:flink-streaming-java_$flinkScalaVersion:${flinkVersion}"
    compile "org.apache.flink:flink-streaming-scala_$flinkScalaVersion:${flinkVersion}"
    compile "org.slf4j:slf4j-log4j12:${slf4jLog4JVersion}"
    if (includePravegaCredentials.toBoolean()) {
        compile "io.pravega:pravega-keycloak-credentials:${pravegaCredentialsVersion}"
    }
}

shadowJar {
    dependencies {
        include dependency("org.scala-lang.modules:scala-java8-compat_$flinkScalaVersion")
        include dependency("io.pravega:pravega-connectors-flink_$flinkScalaVersion")
    }
    classifier = ""
    zip64 true
}

task scriptWordCountWriter(type: CreateStartScripts) {
    outputDir = file('build/scripts')
    mainClassName = 'io.pravega.example.flink.wordcount.WordCountWriter'
    applicationName = 'wordCountWriter'
    classpath = files(jar.archivePath) + sourceSets.main.runtimeClasspath
}

task scriptWordCountReader(type: CreateStartScripts) {
    outputDir = file('build/scripts')
    mainClassName = 'io.pravega.example.flink.wordcount.WordCountReader'
    applicationName = 'wordCountReader'
    classpath = files(jar.archivePath) + sourceSets.main.runtimeClasspath
}

task scriptExactlyOnceWriter(type: CreateStartScripts) {
    outputDir = file('build/scripts')
    mainClassName = 'io.pravega.example.flink.primer.process.ExactlyOnceWriter'
    applicationName = 'exactlyOnceWriter'
    classpath = files(jar.archivePath) + sourceSets.main.runtimeClasspath
}

task scriptExactlyOnceChecker(type: CreateStartScripts) {
    outputDir = file('build/scripts')
    mainClassName = 'io.pravega.example.flink.primer.process.ExactlyOnceChecker'
    applicationName = 'exactlyOnceChecker'
    classpath = files(jar.archivePath) + sourceSets.main.runtimeClasspath
}

task scriptStreamCutsDataProducer(type: CreateStartScripts) {
    outputDir = file('build/scripts')
    mainClassName = 'io.pravega.example.flink.streamcuts.process.DataProducer'
    applicationName = 'dataProducer'
    classpath = files(jar.archivePath) + sourceSets.main.runtimeClasspath
}

task scriptStreamCutsStreamBookmarker(type: CreateStartScripts) {
    outputDir = file('build/scripts')
    mainClassName = 'io.pravega.example.flink.streamcuts.process.StreamBookmarker'
    applicationName = 'streamBookmarker'
    classpath = files(jar.archivePath) + sourceSets.main.runtimeClasspath
}

task scriptStreamCutsSliceProcessor(type: CreateStartScripts) {
    outputDir = file('build/scripts')
    mainClassName = 'io.pravega.example.flink.streamcuts.process.SliceProcessor'
    applicationName = 'sliceProcessor'
    classpath = files(jar.archivePath) + sourceSets.main.runtimeClasspath
}

distributions {
    main {
        baseName = archivesBaseName
        contents {
            into('lib') {
                from shadowJar
                from(project.configurations.shadow)
                from(jar)
                from(project.configurations.runtime)
            }
            into('bin') {
                from project.scriptWordCountWriter
                from project.scriptWordCountReader
                from project.scriptExactlyOnceWriter
                from project.scriptExactlyOnceChecker
                from project.scriptStreamCutsDataProducer
                from project.scriptStreamCutsStreamBookmarker
                from project.scriptStreamCutsSliceProcessor
            }
        }
    }
}

publishing {
    repositories {
        maven {
            credentials {
                username username
                password password
            }
            url projectRepoUrl
        }
    }

    publications {
        shadow(MavenPublication) { publication ->
            project.shadow.component(publication)
        }
    }
}
